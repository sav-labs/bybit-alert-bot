import asyncio
import sys
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from loguru import logger

from app.settings import BOT_TOKEN
from app.handlers import routers
from app.db import init_db
from app.services.token_alert_service import TokenAlertService
from app.migrate import migrate_add_last_alert_time

# Global bot instance for access from other modules
bot = Bot(token=BOT_TOKEN)

async def alert_worker():
    """Background worker that checks for price alerts."""
    while True:
        try:
            # Check for alerts that need to be sent
            alerts_to_send = await TokenAlertService.check_price_alerts()
            
            # Send notifications for each alert
            for item in alerts_to_send:
                alert = item["alert"]
                current_price = item["current_price"]
                last_price = item["previous_price"]  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                time_passed = item.get("time_passed", 0)  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
                hours, remainder = divmod(int(time_passed), 3600)
                minutes, seconds = divmod(remainder, 60)
                
                if hours > 0:
                    time_str = f"{hours}h {minutes}m {seconds}s"
                elif minutes > 0:
                    time_str = f"{minutes}m {seconds}s"
                else:
                    time_str = f"{seconds}s"
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_diff = current_price - last_price
                price_diff_percent = (price_diff / last_price) * 100 if last_price else 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                is_price_up = price_diff > 0  # –ò—Å–ø–æ–ª—å–∑—É–µ–º price_diff –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                direction_emoji = "üü¢" if is_price_up else "üî¥"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                sign = "+" if is_price_up else "-"
                abs_diff = abs(price_diff)
                abs_percent = abs(price_diff_percent)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ–ª–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if abs_diff < 0.0001:
                    diff_formatted = f"{sign}${abs_diff:.10f}"
                elif abs_diff < 0.01:
                    diff_formatted = f"{sign}${abs_diff:.6f}"
                else:
                    diff_formatted = f"{sign}${abs_diff:,.2f}"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                if abs_percent < 0.0001:
                    percent_formatted = f"{sign}{abs_percent:.10f}%"
                elif abs_percent < 0.01:
                    percent_formatted = f"{sign}{abs_percent:.6f}%"
                else:
                    percent_formatted = f"{sign}{abs_percent:.4f}%"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
                # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ —á–µ–º 0.000001, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–Ω–∏—Ü—É –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                if abs_diff < 0.000001:
                    diff_formatted = f"{sign}${price_diff:e}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—É—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
                if abs_percent < 0.000001:
                    percent_formatted = f"{sign}{price_diff_percent:e}%"  # –ù–∞—É—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.debug(f"Price change: from {last_price} to {current_price} = {price_diff}")
                logger.debug(f"Formatted: {diff_formatted} ({percent_formatted})")
                
                # Format message
                message = (
                    f"‚ö°Ô∏è *{alert.symbol}* ‚ö°Ô∏è\n"
                    f"{direction_emoji} *${current_price:,.2f}*\n"
                    f"Change: *{diff_formatted}* ({percent_formatted})\n"
                    f"Time since last alert: *{time_str}*\n"
                    f"Alert step: *${alert.price_multiplier:g}*"
                )
                
                try:
                    # Send message to user
                    await bot.send_message(
                        alert.user_id,
                        message,
                        parse_mode="Markdown"
                    )
                    logger.info(f"Sent price alert to user {alert.user_id} for {alert.symbol}: ${current_price:,.2f} (change: {diff_formatted})")
                except Exception as e:
                    logger.error(f"Failed to send alert to user {alert.user_id}: {e}")
        
        except Exception as e:
            logger.error(f"Error in alert worker: {e}")
        
        # Wait before next check
        from app.settings import POLLING_INTERVAL
        await asyncio.sleep(POLLING_INTERVAL)
        logger.debug(f"Alert worker checked prices after {POLLING_INTERVAL}s interval")

async def main():
    """Main bot function."""
    # Initialize database
    try:
        init_db()
        logger.info("Database initialized")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è last_alert_time
        migrate_result = migrate_add_last_alert_time()
        if migrate_result:
            logger.info("Database migration completed")
        else:
            logger.warning("Database migration failed or was not needed")
    except Exception as e:
        logger.error(f"Database initialization error: {e}")
        return
    
    # Create dispatcher
    dp = Dispatcher(storage=MemoryStorage())
    
    # Register all routers
    for router in routers:
        dp.include_router(router)
    
    # Start alert worker
    asyncio.create_task(alert_worker())
    logger.info("Alert worker started")
    
    # Start polling
    logger.info("Starting bot")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ main.py —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
        logger.warning("Direct execution of bot.py is not recommended. Use 'python main.py' instead.")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        sys.exit(1) 